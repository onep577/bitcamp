CREATE TABLE CUSTOMER(
	ID				VARCHAR2(20) PRIMARY KEY,
	PASSWORD		VARCHAR2(20) NOT NULL,
	NAME			VARCHAR2(20) NOT NULL,
	ADDRESS			VARCHAR2(50) NOT NULL,
	BIRTHDAY		VARCHAR2(20) NOT NULL,
	PHONE			VARCHAR2(50) NOT NULL,
	AUTH			NUMBER(1)	 NOT NULL,
	EMAIL			VARCHAR2(50),
	GRADE			VARCHAR2(10) NOT NULL,
	BOOKING_COUNT	NUMBER(20)	 NOT NULL,
	TOTAL_PAYMENT	NUMBER(20)	 NOT NULL
)

DROP TABLE CUSTOMER
CASCADE CONSTRAINTS;

SELECT * FROM CUSTOMER


INSERT INTO CUSTOMER VALUES('aaa','aaa','관리자','서울 강남구 백암빌딩 456', '19601107','01012345678', 1, 'abcd@naver.com','일반', 0, 0);




-- 테이블 지울 때 무결성도 같이 지워주기
DROP TABLE PERSONQNA
CASCADE CONSTRAINTS;

-- 시퀀스 지우기
DROP SEQUENCE SEQ_PERSONQNA;




-- 예약 테이블
CREATE TABLE BOOKING(
	SEQ				NUMBER(10)	 PRIMARY KEY,
	ID				VARCHAR2(20) NOT NULL,
	WDATE			DATE		 NOT NULL,
	VISIT_DATE		VARCHAR2(20) NOT NULL,
	LEAVE_DATE		VARCHAR2(20) NOT NULL,
	TOTAL_PRICE 	NUMBER(20)	 NOT NULL,
	ADULT_NUMBER	NUMBER(1)	 NOT NULL,
	CHILD_NUMBER	NUMBER(1)	 NOT NULL,
	ROOM_NUMBER		VARCHAR2(20) NOT NULL
)

-- 방정보 테이블
CREATE TABLE ROOM(
	ROOM_NUMBER		VARCHAR2(20) PRIMARY KEY,
	PRICE			VARCHAR2(20) NOT NULL,
	GRADE			VARCHAR2(20) NOT NULL
)

-- 공지사항 테이블
CREATE TABLE NOTICE(
	SEQ				NUMBER(10)	 PRIMARY KEY,
	ID				VARCHAR2(20) NOT NULL,
	TITLE			VARCHAR2(50) NOT NULL,
	CONTENT			VARCHAR2(4000) NOT NULL,
	WDATE			DATE		 NOT NULL,
	DEL				NUMBER(1)	 NOT NULL,
	READCOUNT		NUMBER(10)	 NOT NULL,
	FILENAME		VARCHAR2(20) NOT NULL,
	DOWNCOUNT		NUMBER(20)	 NOT NULL
)

-- 고객의 소리 테이블
CREATE TABLE PERSONQNA(
	SEQ				NUMBER(10)	 PRIMARY KEY,
	ID				VARCHAR2(20) NOT NULL,
	TITLE			VARCHAR2(50) NOT NULL,
	CONTENT			VARCHAR2(4000) NOT NULL,
	WDATE			DATE		 NOT NULL,
	ANSWER_CHECK	NUMBER(1)	 NOT NULL,
	QUESTION_TYPE	VARCHAR2(20) NOT NULL,
	COMMENTS		VARCHAR2(4000)
)


-- 예약 테이블 시퀀스
CREATE SEQUENCE SEQ_BOOKING
START WITH 1
INCREMENT BY 1;

-- 고객 테이블 ID를 참조하는 예약 테이블 외래키 : ID
ALTER TABLE BOOKING
ADD CONSTRAINT FK_BOOKING_ID FOREIGN KEY(ID)
REFERENCES CUSTOMER(ID);

-- 방정보 테이블 ROOM_NUMBER를 참조하는 예약 테이블 외래키 : ROOM_NUMBER
ALTER TABLE BOOKING
ADD CONSTRAINT FK_BOOKING_ROOM_NUMBER FOREIGN KEY(ROOM_NUMBER)
REFERENCES ROOM(ROOM_NUMBER);

-- 공지사항 테이블 시퀀스
CREATE SEQUENCE SEQ_NOTICE
START WITH 1
INCREMENT BY 1;

-- 고객 테이블 ID를 참조하는 공지사항 테이블 외래키 : ID
ALTER TABLE NOTICE
ADD CONSTRAINT FK_NOTICE_ID FOREIGN KEY(ID)
REFERENCES CUSTOMER(ID);

-- 고객의 소리 테이블 시퀀스
CREATE SEQUENCE SEQ_PERSONQNA
START WITH 1
INCREMENT BY 1;

-- 고객 테이블 ID를 참조하는 고객의 소리 테이블 외래키 : ID
ALTER TABLE PERSONQNA
ADD CONSTRAINT FK_PERSONQNA_ID FOREIGN KEY(ID)
REFERENCES CUSTOMER(ID);


INSERT INTO ROOM VALUES('101', '450,000', '디럭스');
INSERT INTO ROOM VALUES('102', '450,000', '디럭스');
INSERT INTO ROOM VALUES('103', '450,000', '디럭스');
INSERT INTO ROOM VALUES('104', '450,000', '디럭스');
INSERT INTO ROOM VALUES('105', '450,000', '디럭스');

INSERT INTO ROOM VALUES('201', '720,000', '프리미어');
INSERT INTO ROOM VALUES('202', '720,000', '프리미어');
INSERT INTO ROOM VALUES('203', '720,000', '프리미어');
INSERT INTO ROOM VALUES('204', '720,000', '프리미어');
INSERT INTO ROOM VALUES('205', '720,000', '프리미어');

INSERT INTO ROOM VALUES('301', '720,000', '프리미어');
INSERT INTO ROOM VALUES('302', '720,000', '프리미어');
INSERT INTO ROOM VALUES('303', '720,000', '프리미어');
INSERT INTO ROOM VALUES('304', '720,000', '프리미어');
INSERT INTO ROOM VALUES('305', '720,000', '프리미어');

INSERT INTO ROOM VALUES('401', '1,200,000', '스위트');
INSERT INTO ROOM VALUES('402', '1,200,000', '스위트');
INSERT INTO ROOM VALUES('403', '1,200,000', '스위트');
INSERT INTO ROOM VALUES('404', '1,200,000', '스위트');
INSERT INTO ROOM VALUES('405', '1,200,000', '스위트');


INSERT INTO BOOKING VALUES(1, 'gdw0923', SYSDATE, '20180101', '20180103', 1500000, 2, 0, '101');
INSERT INTO BOOKING VALUES(2, 'gdw0923', SYSDATE, '20180201', '20180205', 560000, 2, 0, '102');
INSERT INTO BOOKING VALUES(3, 'gdw0923', SYSDATE, '20180301', '20180307', 600000, 2, 1, '103');
INSERT INTO BOOKING VALUES(4, 'gdw0923', SYSDATE, '20180401', '20180405', 780000, 2, 1, '104');
INSERT INTO BOOKING VALUES(5, 'gdw0923', SYSDATE, '20180501', '20180503', 400000, 2, 0, '105');
INSERT INTO BOOKING VALUES(6, 'gdw0923', SYSDATE, '20180601', '20180608', 650000, 2, 0, '201');
INSERT INTO BOOKING VALUES(7, 'gdw0923', SYSDATE, '20180701', '20180715', 750000, 2, 0, '202');
INSERT INTO BOOKING VALUES(8, 'gdw0923', SYSDATE, '20180801', '20180803', 550000, 2, 1, '203');
INSERT INTO BOOKING VALUES(9, 'gdw0923', SYSDATE, '20180901', '20180920', 800000, 2, 1, '204');
INSERT INTO BOOKING VALUES(10, 'gdw0923', SYSDATE, '20181001', '20181006', 700000, 2, 0, '205');

SELECT * FROM CUSTOMER

SELECT * FROM BOOKING

INSERT INTO ROOM VALUES('101', 450000, '디럭스');
INSERT INTO ROOM VALUES('102', 450000, '디럭스');
INSERT INTO ROOM VALUES('103', 450000, '디럭스');
INSERT INTO ROOM VALUES('104', 450000, '디럭스');
INSERT INTO ROOM VALUES('105', 450000, '디럭스');

INSERT INTO ROOM VALUES('201', 720000, '프리미어');
INSERT INTO ROOM VALUES('202', 720000, '프리미어');
INSERT INTO ROOM VALUES('203', 720000, '프리미어');
INSERT INTO ROOM VALUES('204', 720000, '프리미어');
INSERT INTO ROOM VALUES('205', 720000, '프리미어');

INSERT INTO ROOM VALUES('301', 720000, '프리미어');
INSERT INTO ROOM VALUES('302', 720000, '프리미어');
INSERT INTO ROOM VALUES('303', 720000, '프리미어');
INSERT INTO ROOM VALUES('304', 720000, '프리미어');
INSERT INTO ROOM VALUES('305', 720000, '프리미어');

INSERT INTO ROOM VALUES('401', 1200000, '스위트');
INSERT INTO ROOM VALUES('402', 1200000, '스위트');
INSERT INTO ROOM VALUES('403', 1200000, '스위트');
INSERT INTO ROOM VALUES('404', 1200000, '스위트');
INSERT INTO ROOM VALUES('405', 1200000, '스위트');



ALTER TABLE BOOKING MODIFY (ID NULL);

--테이블 수정 NULL 값 허용할떄
ALTER TABLE PERSONQNA MODIFY (ID NULL);
























//차트 1일부터 마지막일까지 전부 보여주기 위한 쿼리문

SELECT * FROM BOOKING 



			SELECT SUM(TOTAL_PRICE) , VISIT_DATE
				 FROM (	SELECT * FROM BOOKING WHERE SUBSTR(VISIT_DATE,5,2) = '09') 
				 GROUP BY VISIT_DATE 
				 ORDER BY VISIT_DATE ASC 
				 
				 


			SELECT SUM(TOTAL_PRICE) , VISIT_DATE
				 FROM (	SELECT * FROM BOOKING WHERE SUBSTR(VISIT_DATE,5,2) = '09') 
				 GROUP BY VISIT_DATE 
				 ORDER BY VISIT_DATE ASC 

SELECT TO_DATE('20190901','yyyymmdd'), 0
   FROM dual
CONNECT BY LEVEL <= TO_DATE('20191001','yyyymmdd') - TO_DATE('20190901','yyyymmdd')


SELECT TO_DATE('20190901','yyyymmdd') + (ROWNUM - 1) dt, 0
   FROM dual
CONNECT BY LEVEL <= TO_DATE('20191001','yyyymmdd') - TO_DATE('20190901','yyyymmdd')


SELECT *
FROM (SELECT SUM(TOTAL_PRICE) , VISIT_DATE
				 FROM (	SELECT * FROM BOOKING WHERE SUBSTR(VISIT_DATE,5,2) = '09') 
				 GROUP BY VISIT_DATE 
				 ORDER BY VISIT_DATE ASC) as a
 left outer join (SELECT TO_DATE('20190901','yyyymmdd') + (ROWNUM - 1) dt, 0
   FROM dual
CONNECT BY LEVEL <= TO_DATE('20191001','yyyymmdd') - TO_DATE('20190901','yyyymmdd'))
 as b
  on a.VISIT_DATE = b.b_date
  
  

  
  
  SELECT *
FROM (SELECT SUM(TOTAL_PRICE) , TO_DATE(VISIT_DATE,'yyyymmdd')
				 FROM (	SELECT * FROM BOOKING WHERE SUBSTR(VISIT_DATE,5,2) = '09') 
				 GROUP BY VISIT_DATE 
				 ORDER BY VISIT_DATE ASC) e FULL OUTER JOIN ( SELECT TO_DATE('20190901','yyyymmdd') + (ROWNUM - 1) dt, 0
															   FROM dual
															CONNECT BY LEVEL <= TO_DATE('20191001','yyyymmdd') - TO_DATE('20190901','yyyymmdd') ) d
    									    ON e.VISIT_DATE = d.dt

 SELECT e.employee_id, e.first_name, e.department_id, 
    d.department_id, d.department_name
FROM employees e, departments d
WHERE e.department_id = d.department_id(+);
   									    
    									    
    SELECT *
FROM (SELECT SUM(TOTAL_PRICE) , TO_DATE(VISIT_DATE,'yyyymmdd')
				 FROM (	SELECT * FROM BOOKING WHERE SUBSTR(VISIT_DATE,5,2) = '09') 
				 GROUP BY VISIT_DATE 
				 ORDER BY VISIT_DATE ASC) e, ( SELECT 0, TO_DATE('20190901','yyyymmdd') + (ROWNUM - 1) dt
															   FROM dual
															CONNECT BY LEVEL <= TO_DATE('20191001','yyyymmdd') - TO_DATE('20190901','yyyymmdd') ) d
    									    WHERE e.VISIT_DATE = d.dt(+);
    									    
 , visit NVL(e.total, '0')
 
SELECT NVL(e.total, '0')
FROM (SELECT SUM(TOTAL_PRICE) as total , TO_DATE(VISIT_DATE,'yyyymmdd') as visit
				 FROM (	SELECT * FROM BOOKING WHERE SUBSTR(VISIT_DATE,5,2) = '09') 
				 GROUP BY VISIT_DATE 
				 ORDER BY VISIT_DATE ASC) e FULL OUTER JOIN ( SELECT 0, TO_DATE('20190901','yyyymmdd') + (ROWNUM - 1) dt
															   FROM dual
															CONNECT BY LEVEL <= TO_DATE('20191001','yyyymmdd') - TO_DATE('20190901','yyyymmdd') ) d
    									    ON e.visit = d.dt 									    
  
  
  
















// 남은방 가져오는 SQL
SELECT ROOM_NUMBER, PRICE, GRADE
					 FROM ROOM 
					 WHERE ROOM_NUMBER IN 
					 (SELECT distinct ROOM_NUMBER FROM BOOKING WHERE 
					 TO_DATE(LEAVE_DATE, 'YYYYMMDD') - TO_DATE( '20190831', 'YYYYMMDD') > 0)
					ORDER BY ROOM_NUMBER
					
					
SELECT *FROM BOOKING


SELECT ROOM_NUMBER, PRICE, GRADE
					 FROM ROOM 
					 WHERE ROOM_NUMBER NOT IN 
					 (SELECT distinct ROOM_NUMBER FROM BOOKING WHERE 
					VISIT_DATE > '20190831' AND VISIT_DATE < '20190905' ) 
					ORDER BY ROOM_NUMBER
					
(SELECT distinct ROOM_NUMBER FROM BOOKING WHERE 
(TO_DATE(LEAVE_DATE, 'YYYYMMDD') - TO_DATE(  20190831  , 'YYYYMMDD') > 2 AND TO_DATE(VISIT_DATE, 'YYYYMMDD') - TO_DATE(20190831, 'YYYYMMDD') >2 ))
