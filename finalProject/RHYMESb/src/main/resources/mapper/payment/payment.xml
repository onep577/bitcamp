<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="payment">





<!-- 장바구니에서 결제페이지로 갈 때 -->

<!-- 장바구니에서 결제페이지로 주문한 상품정보 가져오기 -->
<select id="getOrder" parameterType="com.rhymes.app.payment.model.OrderDTO" resultType="com.rhymes.app.payment.model.OrderDTO">
SELECT SP.C_NAME, SP.P_NAME, SP.P_PRICE, SP.PHOTO1_FILE, SS.STOCK_SEQ, SS.SIZE, SP.P_COLOR, SP.P_TITLE
FROM RHY_STORE_PRODUCT SP, RHY_STORE_STOCK SS
WHERE SP.P_SEQ = SS.P_SEQ
AND SS.STOCK_SEQ=#{stock_seq}
</select>

<!-- 결제페이지로 적립금 가져오기 매개변수로 받은 ID가 갖는 적립금 중 유효한 적립금 총 합 리턴 -->
<select id="getPoint" resultType="java.lang.Integer" parameterType="java.lang.String">
<![CDATA[
SELECT 
	SUM(AMOUNT-USED_AMOUNT) AS RESULT
FROM RHY_MEM_POINT 
	WHERE 
		ID = #{userid }
		AND RDATE >= date_add(now(), interval -12 month)
	GROUP BY ID
]]>
</select>

<!-- 결제페이지로 쿠폰 가져오기 -->
<select id="getAllCoupon" parameterType="java.lang.String" resultType="com.rhymes.app.member.model.mypage.MemberCouponDTO">
<![CDATA[
SELECT *
FROM RHY_MEM_COUPON_DETAIL MCD, RHY_MEM_COUPON MC
WHERE MCD.C_SEQ = MC.SEQ AND USERID=#{userid} AND DATE_FORMAT(EXPDATE,'%Y-%m-%d') > CURDATE()
		AND GDATE >= date_add(now(), interval -12 month) AND VISIBLE=1 AND ISUSED='미사용'
]]>
</select>

<!-- 검색조건에 맞는 유효한 쿠폰의 총 개수 리턴 -->
<select id="getCountCoupon" parameterType="java.lang.String" resultType="java.lang.Integer">
<![CDATA[		
	SELECT COUNT(*) AS CNT
	FROM RHY_MEM_COUPON_DETAIL
	WHERE USERID=#{userid} AND DATE_FORMAT(EXPDATE,'%Y-%m-%d') > CURDATE()
			AND GDATE >= date_add(now(), interval -12 month) AND VISIBLE=1 AND ISUSED='미사용'
	GROUP BY USERID;
]]>
</select>

<!-- 이름, 번호, 이메일 회원정보 가져오기 -->
<select id="getMemberInfo" parameterType="java.lang.String" resultType="com.rhymes.app.member.model.P_MemberDTO">
SELECT NAME as username, PHONE as phone, EMAIL as useremail
FROM RHY_MEM_P
WHERE ID=#{userid}
</select>





<!-- 결제페이지에서 결제완료 후 -->

<!-- 결제완료페이지에서 새로고침하면 DB에 두번 들어가는 것 방지 -->
<select id="check_Payment_code" parameterType="com.rhymes.app.payment.model.PaymentDTO" resultType="java.lang.String">
SELECT PAYMENT_CODE
FROM RHY_PAYMENT
WHERE PAYMENT_CODE = #{payment_code}
</select>

<!-- 주문한 상품수량만큼 재고수량에서 차감한다 -->
<update id="disc_stock_quantity" parameterType="com.rhymes.app.payment.model.PaymentAfDTO">
UPDATE RHY_STORE_STOCK
<![CDATA[	
SET QUANTITY = QUANTITY - ${quantity}
WHERE STOCK_SEQ=#{stock_seq}
]]>
</update>

<!-- 결제한 후 결제 디테일에 넣기위한 상품 개당 가격 가져오기 -->
<select id="getPrice" parameterType="java.lang.Integer" resultType="java.lang.Integer">
SELECT P_PRICE
FROM RHY_STORE_STOCK S, RHY_STORE_PRODUCT P
WHERE S.P_SEQ = P.P_SEQ AND S.STOCK_SEQ=#{stock_seq}
</select>

<!-- 결제한 후 결제 디테일 저장(후기여부는 false) -->
<insert id="payment_detail_save" parameterType="com.rhymes.app.payment.model.PaymentDetailsDTO">
INSERT INTO RHY_PAYMENT_DETAILS(S_SEQ, EA, PRICE, PAYMENT_CODE, RDATE)
VALUES(#{s_seq}, #{ea}, #{price}, #{payment_code}, SYSDATE())
</insert>

<!-- 적립금을 차감 하기위해 오래된 순으로 point 금액을 알아낸다 -->
<select id="getPointLastById" parameterType="com.rhymes.app.payment.model.PaymentXmlParamDTO" resultType="com.rhymes.app.payment.model.PaymentXmlParamDTO">
SELECT 
	(AMOUNT - USED_AMOUNT) AS POINT, SEQ
<![CDATA[
FROM RHY_MEM_POINT 
	WHERE 
		ID = #{userid} AND RDATE >= date_add(now(), interval -12 month)
		ORDER BY RDATE ASC
		limit #{count}, 1
]]>
</select>

<!-- 적립금 차감한다 -->
<update id="discPointByid" parameterType="com.rhymes.app.payment.model.PaymentXmlParamDTO">
UPDATE RHY_MEM_POINT
<![CDATA[
SET USED_AMOUNT = USED_AMOUNT + #{point}
WHERE
	ID=#{userid} AND SEQ=#{seq}
]]>
</update>

<!-- 결제내역 저장 -->
<insert id="payment_save" parameterType="com.rhymes.app.payment.model.PaymentDTO">
INSERT INTO RHY_PAYMENT(PAYMENT_CODE, USERID, SEND_NAME, SEND_PHONE, SEND_EMAIL, RECEIVE_NAME,
RECEIVE_PHONE, RECEIVE_POSTNUM, RECEIVE_ADDRESS, PAYMENT_METHOD, PAYMENT_STATUS, DISC_COUPON,
DELIVERY_PRICE, COUPON_CODE, DISC_POINT, DISC_PRODUCT, ADD_POINT, TOTALPRICE, RDATE)

VALUES(#{payment_code}, #{userid}, #{send_name}, #{send_phone}, #{send_email}, #{receive_name},
#{receive_phone}, #{receive_postnum}, #{receive_address}, #{payment_method}, #{payment_status},
#{disc_coupon}, #{delivery_price}, #{coupon_code}, #{disc_point},
#{disc_product}, #{add_point}, #{totalprice}, SYSDATE())
</insert>

<!-- 결제 애프터 내역 저장 -->
<insert id="payment_after" parameterType="com.rhymes.app.payment.model.PaymentAfDTO">
INSERT INTO RHY_PAYMENT_AFTER
VALUES(#{payment_code}, #{vbank_name}, #{vbank_num}, #{vbank_holder}, #{vbank_date},
 #{receipt_url}, #{card_apply_num}, #{basket_del})
</insert>

<!-- 사용한 쿠폰을 사용으로 변환 -->
<update id="update_isused_coupon" parameterType="com.rhymes.app.payment.model.PaymentDTO">
UPDATE RHY_MEM_COUPON_DETAIL
<![CDATA[
SET ISUSED='사용'
WHERE COUP_CODE=#{coupon_code}
]]>
</update>

<!-- 배송 내역 저장 -->
<insert id="delivery_save" parameterType="com.rhymes.app.payment.model.PaymentDTO">
INSERT INTO RHY_DELIVERY
VALUES(#{payment_code}, #{receive_name}, '우체국', '배송 준비중', #{receive_postnum}, #{receive_address_request}, null)
</insert>

<!-- 결제 후 장바구니 내역 삭제 -->
<delete id="delete_basket" parameterType="java.lang.String">
DELETE FROM RHY_STORE_BASKET
WHERE ID=#{id}
</delete>





</mapper>
