/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.42
 * Generated at: 2019-08-23 07:56:30 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class account_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("<script src=\"https://code.jquery.com/jquery-3.4.1.min.js\">\r\n");
      out.write("</script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");

//String id = request.getParameter("id");

      out.write("\r\n");
      out.write("\r\n");
      out.write("<form action=\"accountAf.do\" name=\"frm\" onsubmit=\"return frmsubmit()\" method=\"POST\">\r\n");
      out.write("ID : <input type=\"text\" name=\"id\" id=\"a_id\">\r\n");
      out.write("<input type=\"button\" id=\"checkid\" value=\"id중복확인\"><br>\r\n");
      out.write("<p></p>\r\n");
      out.write("PW : <input type=\"text\" name=\"pwd\" id=\"a_pw\"><br>\r\n");
      out.write("Name : <input type=\"text\" name=\"name\" id=\"a_name\"><br>\r\n");
      out.write("Email : <input type=\"text\" name=\"email\" id=\"a_email\"><br>\r\n");
      out.write("\r\n");
      out.write("<!-- <input type=\"submit\" id=\"account\" value=\"회원가입 완료\"> -->\r\n");
      out.write("<input type=\"submit\" value=\"회원가입 완료\">\r\n");
      out.write("</form>\r\n");
      out.write("\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("$(\"p\").hide();\r\n");
      out.write("\r\n");
      out.write("function frmsubmit(){\r\n");
      out.write("\t// 입력 안된 정보가 있을 때 submit을 막아준다\r\n");
      out.write("\t\r\n");
      out.write("\t//alert( $(\"#a_id\").val().trim() );\r\n");
      out.write("\tif( $(\"#a_id\").val().trim() == \"\" || $(\"#a_pw\").val().trim() == \"\"\r\n");
      out.write("\t\t\t|| $(\"#a_name\").val().trim() == \"\" || $(\"#a_email\").val().trim() == \"\" ){\r\n");
      out.write("\t\talert(\"모두 기입해주세요\");\r\n");
      out.write("\t\treturn false;\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\tif($(\"p\").html() == \"사용 불가능합니다\"){\r\n");
      out.write("\t\talert(\"id 중복확인을 해주세요\");\r\n");
      out.write("\t\t// 텍스트필드의 값을 초기화해서 필요없다\r\n");
      out.write("\t\treturn false;\r\n");
      out.write("\t}else if($(\"p\").html() == \"사용 가능합니다\"){\r\n");
      out.write("\t\treturn true;\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("$(\"#checkid\").click(function () {\t\r\n");
      out.write("\tif( $(\"#a_id\").val().trim() == \"\" ){\r\n");
      out.write("\t\talert(\"아이디를 입력해주세요\");\r\n");
      out.write("\t\treturn;\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\t$.ajax({\r\n");
      out.write("\t\turl: \"checkId.jsp\",\r\n");
      out.write("\t\tdata: \"id=\"+$(\"#a_id\").val().trim(),\r\n");
      out.write("\t\tdatatype: \"text\",\r\n");
      out.write("\t\ttype: \"get\",\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tsuccess: function( msg ) {\r\n");
      out.write("\t\t\talert(msg);\r\n");
      out.write("\t\t\t$(\"p\").show();\r\n");
      out.write("\t\t\t$(\"p\").css({\"color\":\"red\", \r\n");
      out.write("\t\t\t\t\t\t\"font-size\":\"12px\"});  \r\n");
      out.write("\t\t\t$(\"p\").html( msg.trim() );\t\t\t\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\tif( msg.trim() == \"사용 불가능합니다\" ){\r\n");
      out.write("\t\t\t\t$(\"p\").css(\"color\", \"red\");\r\n");
      out.write("\t\t\t\t$(\"#a_id\").focus();\r\n");
      out.write("\t\t\t\t$(\"#a_id\").val(\"\");\r\n");
      out.write("\t\t\t}else {\r\n");
      out.write("\t\t\t\t$(\"p\").css(\"color\", \"blue\");\r\n");
      out.write("\t\t\t\t$(\"#a_pw\").focus();\r\n");
      out.write("\t\t\t}\t\r\n");
      out.write("\t\t\t/**/\r\n");
      out.write("\t\t},\r\n");
      out.write("\t\terror: function (){\r\n");
      out.write("\t\t\talert(\"통신 실패\");\r\n");
      out.write("\t\t}\r\n");
      out.write("\t});\r\n");
      out.write("\t\r\n");
      out.write("});\r\n");
      out.write("\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
